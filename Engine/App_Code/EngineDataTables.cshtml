@using System.Collections
@using System.Reflection
@using WebAppIDEEngine.Models.Core
@using ViewModel.ActionTypes
@using WebAppIDEEngine.Models.ICore
@using Engine.Attributes
@using System.Web.Mvc
@using ViewModel.ActionTypes
@using Domain.Attributes
@using System.Web.Mvc.Html;
@using System.Web.Routing
@using Engine.Service.AbstractControllers
@using System.Linq



@*HtmlHelper<dynamic>*@

@helper DataTable(IDataTable datatableTmp, ViewDataDictionary ViewData, System.Web.Mvc.HtmlHelper _html
    , string TableId, ViewContext ViewContext, bool showToolsButtons = true)
{
    dynamic datatable = null;

    if (datatableTmp is BaseDataTable<dynamic>)
    {
        datatable = datatableTmp as BaseDataTable<dynamic>;
    }
    else if (datatableTmp is IModelDataTable)
    {
        datatable = datatableTmp as IModelDataTable;
    }
    else if (datatableTmp is ObjectDataTable<IModel>)
    {
        datatable = datatableTmp as ObjectDataTable<IModel>;
    }
    else
    {
        datatable = datatableTmp as dynamic;
    } /*
if ((datatable is IDataTable))
{
    if(datatable.Records!=null && datatable.RecordsList == null)
    {
        datatable.RecordsList= datatable.Records.ToList();
    }
}*/


    if (!(datatable is IDataTable) || datatable == null || datatable.Headers == null || datatable.RecordsList == null)
    {
        throw new Exception("مدلها نال است");
    }


    var headers = datatable.Headers;
    var RecordsList = datatable.RecordsList;
    var currentController = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();


    object rec = null;
    if (RecordsList.Count > 0)
    {
        rec = RecordsList[0];
    }
    System.Reflection.PropertyInfo[] props = null;
    if (rec != null)
    {
        props = rec.GetType().GetProperties().Where(p => !(p is HiddenColumnAttribute)).ToArray();
    }


@*<form class="form-control">
            <label></label>
            <input  name="searchTerm"/>

        </form>*@

    <table class="table table-striped" id="@TableId">
        <thead>
        <tr>
            @foreach (var th in headers)
            {
                <th>@th.Value</th>
            }
            @if (showToolsButtons)
            {
                <th>ویرایش</th>
                <th>حذف</th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var record in RecordsList)
        {
            <tr>
                @foreach (var header in headers)
                {
                    var property = record.GetType()?.GetProperty(header.Key);

                    if (property.PropertyType == typeof(string)
                        || property.PropertyType == typeof(int) ||
                        property.PropertyType == typeof(long) ||
                        property.PropertyType == typeof(decimal)
                        )
                    {
                        var name = property?.GetValue(record);
                        <td>@name</td>
                    }
                    else if (property.PropertyType.IsGenericType ||
                             property.PropertyType.IsInterface)
                    {
                                @*var openDataTableAttribute =property.GetCustomAttributes(true)
                                    .FirstOrDefault(g => g is OpenDataTableAttribute) as OpenDataTableAttribute;
                                if (openDataTableAttribute != null)
                                {
                                    var parms = openDataTableAttribute.Parameters.Split(',');
                                    var dyna = new RouteValueDictionary();
                                    foreach (var s in parms)
                                    {
                                        var arr=s.Split(':');
                                        dyna[arr.Length==2 ? arr[0] : "Id"] = arr.Length==2 ? arr[1] : arr[0];
                                    }
                                    dyna["Area"] = openDataTableAttribute.Area;
                                    <td>@_html.ActionLink(openDataTableAttribute.Name,
                                            openDataTableAttribute.Action
                                            , openDataTableAttribute.Controller,
                                            dyna)</td>
                                }
                                else
                                {*@
                        <td><button type="button" class="btn btn-info">@property.Name</button></td>
                    }
                    else if (property.PropertyType.IsEnum)
                    {
                        var enm = @property?.GetValue(record);
                        <td>@enm</td>
                    }
                    else if (property?.GetValue(record) is IModel)
                    {
                        var enm = property?.GetValue(record) as IModel;
                        if (enm != null)
                        {
                            <td>@enm.Name</td>
                        }
                    }
                    else
                    {
                        <td>@property.GetValue(record)</td>
                    }
                           @*if (property.PropertyType.IsClass)
                            {
                                <td>@property.Name</td>
     }
                           else
                           {
                               <td>@property.GetValue(record)</td>
                           }*@
                            @*else if (property.PropertyType==typeof(IModel))
                            {
                                var el = (property as IModel);
                                <td>@el.Name</td>
                                
                            }
                            else if (property.PropertyType==typeof(ICollection<>))
                            {
                                
                                <td>@property.Name</td>
                                var openDataTableAttribute = property.GetCustomAttributes(true).FirstOrDefault(g =>
                                    g is OpenDataTableAttribute) as OpenDataTableAttribute;
                                if (openDataTableAttribute != null)
                                {
                                    var parms=openDataTableAttribute.Parameters.Split(',');
                                    var dyna = new RouteValueDictionary();
                                    foreach (var s in parms)
                                    {
                                        dyna[s.Split(':')[0]]=s.Split(':')[1] ;
                                    }
                                    dyna["Area"] = openDataTableAttribute.Area;
                                    <td>@_html.ActionLink(openDataTableAttribute.Name,
                                            openDataTableAttribute.Action
                                            ,openDataTableAttribute.Controller,
                                            dyna)</td>
                                } 
                            }*@
                }

                @if (showToolsButtons)
                {
                    <td>@_html.ActionLink("ویرایش", $"ForEdit", new {id = record.Id})</td>


                @*
                        <form action="delete?id=@record.Id" method="post">
                   
                        </form>*@

                    using (_html.BeginForm("delete", currentController, new {id = record.Id}))
                    {
                        @_html.AntiForgeryToken()
                        <td>
                            <button type="submit" class="btn btn-danger">حذف </button>
                        </td>
                    }
                }


            </tr>
        }

        </tbody>


        <tfoot>
        <tr>
            @foreach (var th in headers)
            {
                <th>@th.Value</th>
            }
        </tr>
        </tfoot>
    </table>
}


@helper Validate(BaseAttribute attr, System.Reflection.PropertyInfo p, dynamic m, ViewDataDictionary ViewData)
{
    if (attr == null)
    {
        throw new Exception("دروپداون نال است");
    }
    if (m == null)
    {
        throw new Exception("مدل نال است");
    }


    if (ViewData[p.Name] == null)
    {
        throw new Exception("ViewData[p.Name] نال است");
    }
}

@helper RenderSearch(DropDownAttribute attr, System.Reflection.PropertyInfo p, dynamic m, ViewDataDictionary ViewData)
{
    Validate(attr, p, m, ViewData);

    <form action="/GetDataTable">
        <div class="form-group">
            <label for="SearchTerm">جستجو :</label>
            <input type="text" class="form-control" id="SearchTerm">
        </div>

        <button type="submit" class="btn btn-primary" placeHolder="جستجو...">جستجو</button>
    </form>
}